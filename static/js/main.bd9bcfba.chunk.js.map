{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["config","provider","Web3","providers","WebsocketProvider","contract","eth","Contract","options","address","App","useState","result","setResult","loading","setLoading","a","resultTemp","methods","get_deposit_count","call","totalCallCountHex","totalCallCount","parseInt","substring","match","reverse","join","console","log","getPastEvents","fromBlock","allDepositEvents","invalidRegistry","validCount","forEach","event","amount","returnValues","amountDecimal","transactionHash","blockNumber","push","useEffect","loadData","content","style","maxWidth","value","maxValue","text","toFixed","Math","max","length","className","width","map","item","index","link","rel","target","href","position","left","top","transform","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd9bcfba.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport './App.css';\nimport Web3 from 'web3';\n\nconst depositeContractABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"amount\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"index\",\"type\":\"bytes\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_deposit_count\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_deposit_root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}];\nconst config = {\n  node: 'wss://mainnet.infura.io/ws/v3/810e7e7563ad46f38bd40bd8b332b322',\n  address: '0x00000000219ab540356cBB839Cbe05303d7705Fa' // deposite contract address\n};\nconst provider = new Web3.providers.WebsocketProvider(config.node);\nconst web3 = new Web3(provider);\n\nconst contract = new web3.eth.Contract(depositeContractABI);\ncontract.options.address = config.address;\n\nfunction App() {\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n\n  async function loadData() {\n    try {\n      setLoading(true);\n      const resultTemp = {};\n\n      const totalCallCountHex = await contract.methods.get_deposit_count().call();\n      const totalCallCount = parseInt(totalCallCountHex.substring(2).match(/../g).reverse().join(''), 16)\n      resultTemp.totalCallCount = totalCallCount;\n      console.log(\"Total count : \", totalCallCount);\n    \n      const allDepositEvents = await contract.getPastEvents(\n        'DepositEvent',\n        {\n          fromBlock: 0,\n        }\n      );\n    \n      console.log(\"---------------\");\n      resultTemp.invalidRegistry = [];\n\n      let validCount = 0;\n      allDepositEvents.forEach(event => {\n        const amount = event.returnValues.amount;\n        const amountDecimal = parseInt(amount.substring(2).match(/../g).reverse().join(''), 16);\n    \n        if (amountDecimal >= 32000000000) {\n          validCount++;\n        } else {\n          console.log(\"TxHash : \", event.transactionHash);\n          console.log(\"Block number :\", event.blockNumber);\n          console.log(\"Amount : \", amountDecimal);\n          console.log(\"---------------\");\n          resultTemp.invalidRegistry.push({\n            transactionHash: event.transactionHash,\n            blockNumber: event.blockNumber,\n            amount: amountDecimal\n          });\n        }\n      });\n\n      resultTemp.validCount = validCount;\n    \n      console.log(\"Total count : \", totalCallCount);\n      console.log(\"Valid Count : \" + validCount);\n\n      setResult(resultTemp);\n          \n    } finally {\n      setLoading(false);\n    }\n\n  }\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  let content = {};\n  if(loading) {\n    content = <p>Loading...</p>\n  } else {\n    content = (\n      <div>\n        <div style={ {maxWidth: \"400px\"} }>\n          <CircularProgressbar \n            value={result.validCount}\n            maxValue={16384}\n            text={`${(result.validCount/16384 * 100).toFixed(2)}%`}\n          />\n        </div>\n        <p>{result.validCount} validators registered, more {Math.max(16384 - result.validCount, 0)} needed to fill 16384</p>\n        <p>Invalid Registry ({result.invalidRegistry.length}) :</p>\n        <table className=\"styled-table\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Transaction Hash</th>\n              <th>Block</th>\n              <th>Amount</th>\n              <th style={ {width:\"400px\"} }>Link</th>\n            </tr> \n          </thead>\n          <tbody>\n            {result.invalidRegistry.map((item, index) => {\n              const link = `https://etherscan.io/tx/${item.transactionHash}`\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{item.transactionHash}</td>\n                  <td>{item.blockNumber}</td>\n                  <td>{(item.amount/1000000000).toFixed(6)}&nbsp;ETH</td>\n                  <td><a rel={\"noopener noreferrer\"} target=\"_blank\" href={link}>etherscan</a></td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n  return(\n    <div\n      style={{\n          position: 'absolute', left: '50%', top: '50%',\n          transform: 'translate(-50%, -50%)'\n      }}\n    >\n      {content}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}