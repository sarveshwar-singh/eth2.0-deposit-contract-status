{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["config","provider","Web3","providers","WebsocketProvider","contract","eth","Contract","options","address","App","useState","result","setResult","loading","setLoading","a","resultTemp","methods","get_deposit_count","call","totalCallCountHex","totalCallCount","parseInt","substring","match","reverse","join","console","log","getPastEvents","fromBlock","allDepositEvents","invalidRegistry","validCount","forEach","event","amount","returnValues","amountDecimal","transactionHash","blockNumber","push","useEffect","loadData","content","style","maxWidth","value","maxValue","text","toFixed","Math","max","length","className","map","item","index","link","key","rel","target","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e970105.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\n\r\nconst depositeContractABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"amount\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"index\",\"type\":\"bytes\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_deposit_count\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_deposit_root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}];\r\nconst config = {\r\n  node: 'wss://mainnet.infura.io/ws/v3/810e7e7563ad46f38bd40bd8b332b322',\r\n  address: '0x00000000219ab540356cBB839Cbe05303d7705Fa' // deposite contract address\r\n};\r\nconst provider = new Web3.providers.WebsocketProvider(config.node);\r\nconst web3 = new Web3(provider);\r\n\r\nconst contract = new web3.eth.Contract(depositeContractABI);\r\ncontract.options.address = config.address;\r\n\r\nfunction App() {\r\n  const [result, setResult] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n\r\n  async function loadData() {\r\n    try {\r\n      setLoading(true);\r\n      const resultTemp = {};\r\n\r\n      const totalCallCountHex = await contract.methods.get_deposit_count().call();\r\n      const totalCallCount = parseInt(totalCallCountHex.substring(2).match(/../g).reverse().join(''), 16)\r\n      resultTemp.totalCallCount = totalCallCount;\r\n      console.log(\"Total count : \", totalCallCount);\r\n    \r\n      const allDepositEvents = await contract.getPastEvents(\r\n        'DepositEvent',\r\n        {\r\n          fromBlock: 0,\r\n        }\r\n      );\r\n    \r\n      console.log(\"---------------\");\r\n      resultTemp.invalidRegistry = [];\r\n\r\n      let validCount = 0;\r\n      allDepositEvents.forEach(event => {\r\n        const amount = event.returnValues.amount;\r\n        const amountDecimal = parseInt(amount.substring(2).match(/../g).reverse().join(''), 16);\r\n    \r\n        if (amountDecimal >= 32000000000) {\r\n          validCount++;\r\n        } else {\r\n          console.log(\"TxHash : \", event.transactionHash);\r\n          console.log(\"Block number :\", event.blockNumber);\r\n          console.log(\"Amount : \", amountDecimal);\r\n          console.log(\"---------------\");\r\n          resultTemp.invalidRegistry.push({\r\n            transactionHash: event.transactionHash,\r\n            blockNumber: event.blockNumber,\r\n            amount: amountDecimal\r\n          });\r\n        }\r\n      });\r\n\r\n      resultTemp.validCount = validCount;\r\n    \r\n      console.log(\"Total count : \", totalCallCount);\r\n      console.log(\"Valid Count : \" + validCount);\r\n\r\n      setResult(resultTemp);\r\n          \r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  let content = {};\r\n  if(loading) {\r\n    content = <p>Loading...</p>\r\n  } else {\r\n    content = (\r\n      <div>\r\n        <div style={ {maxWidth: \"400px\"} }>\r\n          <CircularProgressbar \r\n            value={result.validCount}\r\n            maxValue={16384}\r\n            text={`${(result.validCount/16384 * 100).toFixed(2)}%`}\r\n          />\r\n        </div>\r\n        <p>{result.validCount} validators registered, more {Math.max(16384 - result.validCount, 0)} needed to fill 16384</p>\r\n        <p>Invalid Registry ({result.invalidRegistry.length}) :</p>\r\n        <table className=\"styled-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Transaction Hash</th>\r\n              <th>Block</th>\r\n              <th>Amount</th>\r\n            </tr> \r\n          </thead>\r\n          <tbody>\r\n            {result.invalidRegistry.map((item, index) => {\r\n              const link = `https://etherscan.io/tx/${item.transactionHash}`\r\n              return (\r\n                <tr key={index}>\r\n                  <td>{index + 1}</td>\r\n                  <td><a rel={\"noopener noreferrer\"} target=\"_blank\" href={link}>{item.transactionHash}</a></td>\r\n                  <td>{item.blockNumber}</td>\r\n                  <td>{(item.amount/1000000000).toFixed(6)}&nbsp;ETH</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n  return(\r\n    <div\r\n      // style={{\r\n      //     position: 'absolute', left: '50%', top: '50%',\r\n      //     transform: 'translate(-50%, -50%)'\r\n      // }}\r\n    >\r\n      {content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}